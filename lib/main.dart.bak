import 'package:flutter/material.dart';
import 'models/dish.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Gestione Ordini',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.green),
        useMaterial3: true,
      ),
      home: const OrderScreen(),
    );
  }
}

class OrderScreen extends StatefulWidget {
  const OrderScreen({super.key});

  @override
  State<OrderScreen> createState() => _OrderScreenState();
}

class _OrderScreenState extends State<OrderScreen> {
  final List<Dish> availableDishes = Dish.getSampleDishes();
  final Map<String, Dish> _selectedDishes = {};

  double get totalCost => _selectedDishes.values.fold(
        0.0,
        (sum, dish) => sum + (dish.price * dish.quantity),
      );

  void _updateDishQuantity(Dish dish, int newQuantity) {
    setState(() {
      if (newQuantity > 0) {
        _selectedDishes[dish.name] = dish.copyWith(quantity: newQuantity);
      } else {
        _selectedDishes.remove(dish.name);
      }
    });
  }

  int _getDishQuantity(Dish dish) {
    return _selectedDishes[dish.name]?.quantity ?? 0;
  }

  List<Dish> get _selectedDishesList {
    return _selectedDishes.values.toList();
  }

  void _showOrderSummary() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) {
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setModalState) {
            return DraggableScrollableSheet(
              initialChildSize: 0.9,
              minChildSize: 0.5,
              maxChildSize: 0.9,
              expand: false,
              builder: (BuildContext context, ScrollController scrollController) {
                return Container(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          const Text(
                            'Il tuo ordine',
                            style: TextStyle(
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          IconButton(
                            icon: const Icon(Icons.close),
                            onPressed: () => Navigator.pop(context),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Text(
                        'Totale: €${totalCost.toStringAsFixed(2)}',
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 16),
                      Expanded(
                        child: _selectedDishes.isEmpty
                            ? const Center(
                                child: Text('Nessun piatto selezionato'),
                              )
                            : ListView.builder(
                                controller: scrollController,
                                itemCount: _selectedDishesList.length,
                                itemBuilder: (context, index) {
                                  final dish = _selectedDishesList[index];
                                  return Dismissible(
                                    key: Key('${dish.name}-$index'),
                                    direction: DismissDirection.endToStart,
                                    background: Container(
                                      color: Colors.red,
                                      alignment: Alignment.centerRight,
                                      padding: const EdgeInsets.only(right: 20),
                                      child: const Icon(
                                        Icons.delete,
                                        color: Colors.white,
                                      ),
                                    ),
                                    onDismissed: (direction) {
                                      final removedDish = dish;
                                      setState(() {
                                        _selectedDishes.remove(dish.name);
                                      });
                                      
                                      if (!mounted) return;
                                      ScaffoldMessenger.of(context).showSnackBar(
                                        SnackBar(
                                          content: Text('${dish.name} rimosso'),
                                          action: SnackBarAction(
                                            label: 'Annulla',
                                            onPressed: () {
                                              setState(() {
                                                _selectedDishes[dish.name] = removedDish;
                                              });
                                            },
                                          ),
                                        ),
                                      );
                                    },
                                    child: Card(
                                      child: ListTile(
                                        leading: const Icon(Icons.fastfood),
                                        title: Text(dish.name),
                                        subtitle: Text(
                                          '${dish.quantity} x €${dish.price.toStringAsFixed(2)} = '
                                          '€${(dish.quantity * dish.price).toStringAsFixed(2)}',
                                        ),
                                        trailing: Row(
                                          mainAxisSize: MainAxisSize.min,
                                          children: [
                                            IconButton(
                                              icon: const Icon(Icons.remove),
                                              onPressed: () {
                                                setState(() {
                                                  if (dish.quantity > 1) {
                                                    _selectedDishes[dish.name] = 
                                                        dish.copyWith(quantity: dish.quantity - 1);
                                                  } else {
                                                    _selectedDishes.remove(dish.name);
                                                  }
                                                });
                                              },
                                            ),
                                            Text('${dish.quantity}'),
                                            IconButton(
                                              icon: const Icon(Icons.add),
                                              onPressed: () {
                                                setState(() {
                                                  _selectedDishes[dish.name] = 
                                                      dish.copyWith(quantity: dish.quantity + 1);
                                                });
                                              },
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  );
                                },
                              ),
                      ),
                      if (_selectedDishes.isNotEmpty)
                        Padding(
                          padding: const EdgeInsets.only(top: 16),
                          child: SizedBox(
                            width: double.infinity,
                            child: ElevatedButton(
                              onPressed: () {
                                final orderTotal = totalCost;
                                setState(() {
                                  _selectedDishes.clear();
                                });
                                if (!mounted) return;
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text('Ordine inviato! Totale: €${orderTotal.toStringAsFixed(2)}'),
                                  ),
                                );
                                Navigator.pop(context);
                              },
                              child: const Text('Conferma ordine'),
                            ),
                          ),
                        ),
                    ],
                  ),
                );
              },
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Menù'),
        actions: [
          Stack(
            children: [
              IconButton(
                icon: const Icon(Icons.shopping_cart),
                onPressed: _showOrderSummary,
              ),
              if (_selectedDishes.isNotEmpty)
                Positioned(
                  right: 8,
                  top: 8,
                  child: Container(
                    padding: const EdgeInsets.all(2),
                    decoration: BoxDecoration(
                      color: Colors.red,
                      borderRadius: BorderRadius.circular(10),
                    ),
                    constraints: const BoxConstraints(
                      minWidth: 16,
                      minHeight: 16,
                    ),
                    child: Text(
                      '${_selectedDishes.values.fold(0, (sum, dish) => sum + dish.quantity)}',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 10,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
            ],
          ),
        ],
      ),
      body: ListView.builder(
        itemCount: availableDishes.length,
        itemBuilder: (context, index) {
          final dish = availableDishes[index];
          final quantity = _getDishQuantity(dish);
          
          return ListTile(
            leading: const Icon(Icons.fastfood),
            title: Text(dish.name),
            subtitle: Text('€${dish.price.toStringAsFixed(2)}'),
            trailing: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                IconButton(
                  icon: const Icon(Icons.remove),
                  onPressed: quantity > 0
                      ? () => _updateDishQuantity(dish, quantity - 1)
                      : null,
                ),
                Text('$quantity'),
                IconButton(
                  icon: const Icon(Icons.add),
                  onPressed: () => _updateDishQuantity(dish, quantity + 1),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}
